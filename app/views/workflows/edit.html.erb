<style>
    /**-----------------------------------------------------------------
     * Style definition for 'Workflow Visualization plugin'
     * -----------------------------------------------------------------
     * Description:    fixates the first column of workflow tables
     * Author:         Uwe Heber <uwe@heber.it>
     * Created:        2018-03-17
     * version:        1.0.0
     */
    .table-scroll {
        position: relative;
        max-width: 100%;
        margin: auto;
        overflow: hidden;
    }
    .table-scroll table {
        width: 100%;
        margin: auto;
    }
    .table-scroll th,
    .table-scroll td {
        white-space: nowrap;
    }
    .table-wrap {
        width: 100%;
        overflow: auto;
    }

    /** style for the cloned table, especially for the first column */
    .clone {
        position: absolute;
        top: 0;
        left: 0;
        pointer-events:none;
    }
    .clone td,
    .clone th {
        visibility: hidden;
        border-color: transparent;
    }
    .clone tbody th {
        visibility: visible;
    }
    .clone .fixed-side {
        visibility: visible;
    }
    .clone thead {
        background: transparent;
    }

    /** display scrollbar within fielset, if its contents overflow */
    fieldset {
        min-width: inherit;
    }

</style>

<%= render :partial => 'action_menu' %>

<%= title l(:label_workflow) %>

<div class="tabs">
  <ul>
    <li><%= link_to l(:label_status_transitions), workflows_edit_path(:role_id => @roles, :tracker_id => @trackers), :class => 'selected' %></li>
    <li><%= link_to l(:label_fields_permissions), workflows_permissions_path(:role_id => @roles, :tracker_id => @trackers) %></li>
  </ul>
</div>

<p><%=l(:text_workflow_edit)%>:</p>

<%= form_tag({}, :method => 'get') do %>
<p>
  <label><%=l(:label_role)%>:
  <%= options_for_workflow_select 'role_id[]', Role.sorted.select(&:consider_workflow?), @roles, :id => 'role_id', :class => 'expandable' %>
  </label>
  <a href="#" data-expands="#role_id"><span class="toggle-multiselect"></span></a>

  <label><%=l(:label_tracker)%>:
  <%= options_for_workflow_select 'tracker_id[]', Tracker.sorted, @trackers, :id => 'tracker_id', :class => 'expandable' %>
  </label>
  <a href="#" data-expands="#tracker_id"><span class="toggle-multiselect"></span></a>

  <%= submit_tag l(:button_edit), :name => nil %>

  <%= hidden_field_tag 'used_statuses_only', '0', :id => nil %>
  <label><%= check_box_tag 'used_statuses_only', '1', @used_statuses_only %> <%= l(:label_display_used_statuses_only) %></label>

</p>
<% end %>

<% if @trackers && @roles && @statuses.any? %>
  <%= form_tag({}, :id => 'workflow_form' ) do %>
    <%= @trackers.map {|tracker| hidden_field_tag 'tracker_id[]', tracker.id, :id => nil}.join.html_safe %>
    <%= @roles.map {|role| hidden_field_tag 'role_id[]', role.id, :id => nil}.join.html_safe %>
    <%= hidden_field_tag 'used_statuses_only', params[:used_statuses_only], :id => nil %>
    <div class="autoscroll">
      <%= render :partial => 'form', :locals => {:name => 'always', :workflows => @workflows['always']} %>

      <fieldset class="collapsible" style="padding: 0; margin-top: 0.5em;">
        <legend onclick="toggleFieldset(this);"><%= l(:label_additional_workflow_transitions_for_author) %></legend>
        <div id="author_workflows" style="margin: 0.5em 0 0.5em 0;">
          <%= render :partial => 'form', :locals => {:name => 'author', :workflows => @workflows['author']} %>
        </div>
      </fieldset>
      <%= javascript_tag "hideFieldset($('#author_workflows'))" unless @workflows['author'].present? %>

      <fieldset class="collapsible" style="padding: 0;">
        <legend onclick="toggleFieldset(this);"><%= l(:label_additional_workflow_transitions_for_assignee) %></legend>
        <div id="assignee_workflows" style="margin: 0.5em 0 0.5em 0;">
      <%= render :partial => 'form', :locals => {:name => 'assignee', :workflows => @workflows['assignee']} %>
        </div>
      </fieldset>
      <%= javascript_tag "hideFieldset($('#assignee_workflows'))" unless @workflows['assignee'].present? %>
    </div>
    <%= submit_tag l(:button_save) %>
  <% end %>
<% end %>

<%= javascript_tag do %>
$("a[data-expands]").click(function(e){
  e.preventDefault();
  var target = $($(this).attr("data-expands"));
  if (target.attr("multiple")) {
    target.attr("multiple", false);
    target.find("option[value=all]").show();
  } else {
    target.attr("multiple", true);
    target.find("option[value=all]").attr("selected", false).hide();
  }
});

/**
 * Client logic for 'Workflow Visualization plugin'
 *
 * @author Uwe Heber <uwe@heber.it>
 * @since 1.0
 */
$(document).ready(function () {

    /**
     * Make workflow tables scrollable, the first column being
     * fixed - is also triggered, when the form was submitted
     */
    $("table.list").each(function () {
        fixateFirstColumn(this);
        styleFirstColumn(this);
    });

    /**
     * Event handler for Submit - to remove the clones before
     * submit the different workflow tables
     */
    $("#workflow_form").submit(function() {
      $("table.clone").each(function(){
        this.remove();
      });
    });
});


/**
 * Fixing the first column of the given table
 *
 * @param {type} table for which the first column is to be fixed
 * @returns {undefined}
 * @author Uwe Heber <uwe@heber.it>
 * @since 1.0
 */
function fixateFirstColumn(table) {
    /** selecting/fixing first cell within each table row */
    $("thead > tr > th:nth-child(1)", table).addClass('fixed-side');
    $("thead > tr > td:nth-child(1)", table).addClass('fixed-side');
    $("tbody > tr > td:nth-child(1)", table).addClass('fixed-side');

    var tableType = getTableType(table);

    /** create wrapper for table scrolling and cloning */
    $(table)
            .wrap('<div id="table-scroll-' + tableType + '" class="table-scroll"></div>')
            .wrap('<div class="table-wrap"></div>')
            .clone(true).appendTo('#table-scroll-' + tableType).addClass('clone');
}

/**
 * Styling the first column of the given table.
 *
 * Method use CSS definitions, which already defined in
 * applicaion.css in order to ensure equality, if the global
 * table style would be changed.
 *
 * @param {type} table for which the first column/cell is to be styled
 * @returns {undefined}
 * @author Uwe Heber <uwe@heber.it>
 * @since 1.0
 */
function styleFirstColumn(table) {
    /** sub header using defined style of 'even' table cells */
    $(".clone thead tr td.fixed-side").css('background-color', $("tbody tr:nth-child(2n)", table).css('background-color'));

    /** column using defined style of table border */
    $('.clone .fixed-side').css('border-right-width', $(table).css('border-right-width'));
    $('.clone .fixed-side').css('border-right-style', $(table).css('border-right-style'));
    $('.clone .fixed-side').css('border-right-color', $(table).css('border-right-color'));
}

/**
 * Determines the type of the given workflow table from class
 * definition.
 *
 * The class definition of each workflow table contains as last
 * entry the type of current table
 *
 * @param {type} table for which the type is to be determined
 * @returns the type of given workflow table
 * @author Uwe Heber <uwe@heber.it>
 * @since 1.0
 */
function getTableType(table) {
    var tableClasses = $(table).attr('class').split(/\s+/);
    return tableClasses[tableClasses.length - 1];
}

<% end %>
